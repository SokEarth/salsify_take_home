name: Automate gifmachine app deployment with terraform

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    environment: gifmachine
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: runner
          POSTGRES_DB: gifmachine_tester
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U runner"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    env:
      DB_ADAPTER: postgresql
      DB_USERNAME: runner
      DB_PASSWORD: runner
      DB_HOST:  localhost
      DB_NAME: gifmachine_tester
      RACK_ENV: test
          
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.5'
          bundler-cache: true

      - name: Update websocket
        working-directory: gifmachine
        run: bundle update em-websocket
          
      - name: Install dependencies
        working-directory: gifmachine
        run: bundle install

      - name: Setup database
        working-directory: gifmachine
        run: |
          bundle exec rake db:create
          bundle exec rake db:migrate
  
  terraform:
    name: Deploy AWS Infrastructure with Terraform
    runs-on: ubuntu-latest
    environment: gifmachine
    outputs:
      database_url: ${{ steps.tf_output.outputs.DATABASE_URL }}

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Terraform Init
        run: terraform init -upgrade
        working-directory: terraform

      # Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform

      - id: tf_output
        name: Get db_url
        run: |
          DB_URL=$(terraform output -raw database_url)
          echo "database_url=$DB_URL" >> $GITHUB_OUTPUT
          DB_USR=$(terraform output -raw db_username)
          echo "database_usr=$DB_USR" >> $GITHUB_OUTPUT
          DB_PASS=$(terraform output -raw db_password)
          echo "database_pswd=$DB_PASS" >> $GITHUB_OUTPUT
          DB_HST=$(terraform output -raw db_host)
          echo "database_hst=$DB_HST" >> $GITHUB_OUTPUT
          DB_NAME=$(terraform output -raw db_name)
          echo "database_name=$DB_NAME" >> $GITHUB_OUTPUT
        working-directory: terraform

  containerize:
    runs-on: ubuntu-latest
    environment: gifmachine
    env:
      DB_ADAPTER: postgresql
      DB_USERNAME: ${{ needs.terraform.outputs.database_usr }}
      DB_PASSWORD: ${{ needs.terraform.outputs.database_pswd }}
      DB_HOST:  ${{ needs.terraform.outputs.database_hst }}
      DB_NAME: ${{ needs.terraform.outputs.database_name }}
      DATABASE_URL: ${{ needs.terraform.outputs.database_url }}
      RACK_ENV: ${{ secrets.RACK_ENV }}
      
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create config/database.yml
        working-directory: gifmachine
        run: |
          mkdir -p config
          cat > config/database.yml <<EOL
          default: &default
            adapter: postgresql
            encoding: unicode
            host: ${DB_HOST}
            username: ${DB_USERNAME}
            password: ${DB_PASSWORD}
            pool: 5
            port: 5432

          production:
            <<: *default
            database: ${DB_NAME}
          EOL
          
      - name: Build and push docker image to ecr
        working-directory: gifmachine
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: salsify-task-repo
          
          IMAGE_TAG: gitmachine-${{ github.sha }}
        run: |
          docker build --build-arg RACK_ENV=${RACK_ENV} --build-arg DATABASE_URL=${DATABASE_URL} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
